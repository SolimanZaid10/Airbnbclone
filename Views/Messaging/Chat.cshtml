@using Airbnb.ViewModels.Messaging
@model ChatViewModel
@{
    Layout = "_Layout_Modal";
    var contact = Model.Chat.Users.FirstOrDefault(x => x.Id != Model.CurrentUser.Id);
    DateTime lastDate = new DateTime(2000, 1, 1);
}
<style>
    .msg-item {
        display: flex;
    }
</style>

<div class="row pinned-top">
    <h2>@contact.FirstName @contact.LastName</h2>
    <span>icons</span>
</div>
<ul type=none id="chatCr" class="chat-cr pinned-center">
    @if (Model.Chat.Messages != null)
        foreach (var msg in Model.Chat.Messages.TakeLast(20))
        {
            <li class="msg-item">
                @if ((msg.DateTime - lastDate).TotalDays != 0) // if msg is in earlier day than the prev msg then print curr msg date
                {
                    <span class="dimmed-sm-label">@msg.DateTime.ToString()</span>
                }
                <div class="img-cr">
                    <img src="~/images/@msg.User.PhotoUrl" class="rounded-circle" />
                </div>
                <div class="msg-details">
                    <div class="row">
                        <label class="name-sm-label">@msg.User.FirstName</label>
                    </div>
                    <div class="row">
                        <p class="normal-text font-weight-bold">@msg.Text</p>
                    </div>
                </div>
            </li>
        }
    else
    {
        <li class="normal-text font-weight-bold">
            <h1>
                Start a converstaion with @contact.FirstName @contact.LastName
            </h1>
        </li>
    }
</ul>
<div>
    <div class="sendmsg-cr">
        <label for="ImageInput">
            <img class="input-icon" src="~/assets/images/imageinput.png" />
            <input hidden id="ImageInput" name="Image" type="file" accept="image/*" />
        </label>
        <input class="form-control" id="text" name="Text" type="text" />
        <button class="form-control send-btn" id="send-btn">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>


@section Scripts{
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

        async function start() {
            try {
                await connection.start();
                console.log("chat hub Connected.");
                try {
                    await connection.invoke("join_chat", "@Model.Chat.ChatId");
                } catch (err) {
                    console.error(err);
                }
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        connection.onclose(start);

        // Start the connection.
        start();

        connection.on("new_message", function (msg) {
            console.log("New Message : ", msg);
                addMsgToList(msg);
        });

        connection.on("removed_message", function (_messageId) {
            console.log(_messageId);
        });

    $('#send-btn').click(function () {
        console.log("clicked");
        connection.invoke("send_message", '@Model.Chat.ChatId', $('#text').val());
    });
    </script>
    <script src="~/js/chat.js"></script>
}
